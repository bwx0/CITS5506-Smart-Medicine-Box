esphome:
  name: medibox
  friendly_name: Smart Medicine Box

  includes:
    - loadcell.h  # load cell reading stabilizer

  on_boot:
    - priority: 600
      then:      
        - delay: 200ms
        - lambda: |-
            ESP_LOGE("on_boot", "esphome test");



esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino
    version: latest

logger:
  baud_rate: 115200
  level: INFO

wifi:
  networks:
    - ssid: "BH"
      password: "12345699"

  ap:
    ssid: "Medibox"
    password: "Med.123456"

  on_connect:
    then:
      - logger.log: "Wi-Fi connected"
      - lambda: |-
          id(wifi_connected) = true;

  on_disconnect:
    - then:
        - lambda: 'id(wifi_connected) = false;'
        - logger.log: "Wi-Fi disconnected"
        # - delay: 1min
        # - logger.log: "Wi-Fi disconnected, restarting to trigger fallback."
        # - lambda: |-
        #     App.safe_reboot();
  fast_connect: true
  reboot_timeout: 0s # don't reboot even when there is no wifi, because the medibox is expected to work without wifi


# Enable Home Assistant API
api:
  encryption:
    key: "pAV6+qWo2cOuRC11TgwtsyvzpNquS8cDr+Lgp/0+qsg="
  actions:
    - action: set_zero
      then:
        - lambda: |-
            // subtract current reading so next output is zero
            id(bias) = id(bias) - id(windowed_weight).state / id(lc_k);
            ESP_LOGI("medibox", "Bias reset to: %f", id(bias));
    
    # expose some debugging actions to HA
    - action: call_start_reminder
      then:
        - script.execute: start_reminder

    - action: call_stop_reminder
      then:
        - script.execute: stop_reminder

    - action: call_reset_total_pills_taken
      then:
        - script.execute: reset_total_pills_taken

    - action: call_set_empty_weight
      then:
        - script.execute: set_empty_weight

    # send medication event to HA: "on_time", "missed", "outside_window"
    - action: call_send_medicine_event
      variables:
        status0: string
      then:
        - script.execute:
            id: send_medicine_event
            status: !lambda 'return status0;'
    
    - action: call_fire_logbook_event
      variables:
        action: string        # "on_time" | "missed" | "off_sched" | "refill"
        qty: int              # number of pills (0 for "missed")
      then:
        - script.execute:
            id: fire_logbook_event
            action: !lambda 'return action;'
            qty: !lambda 'return qty;'
  
  # is esphome connected to HA?
  on_client_connected:
    then:
      - logger.log: "Home Assistant is connected!"
      - lambda: 'id(HA_connected)++;'
  on_client_disconnected:
    then:
      - logger.log: "Home Assistant is disconnected!"
      - lambda: 'id(HA_connected)--;'


ota:
  - platform: esphome
    password: "313a33b1a2fbe1103b648b26e66f85cf"

captive_portal:

# Globals
globals:
  - id: wifi_connected
    type: bool
    restore_value: no
    initial_value: 'false'

  - id: HA_connected
    type: int
    restore_value: no
    initial_value: '0'

  - id: HA_synced   # ever synced since boot?
    type: bool
    restore_value: no
    initial_value: 'false'

  - id: timeout_scaler
    type: int
    restore_value: no
    initial_value: '1'  # default is 60: unit time is 1 minute  # fixme

  # load cell
  - id: bias
    type: float
    restore_value: true
    initial_value: '25000'

  - id: lc_k
    type: float
    initial_value: '0.550928e-3f'
    restore_value: false
  
  # LED
  - id: led_state
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: buzzer_state
    type: bool
    restore_value: no
    initial_value: 'false'

  # Globals & time
  - id: pill_count
    type: int
    initial_value: '0'

  - id: reminder_active
    type: bool
    initial_value: 'false'

  - id: weight_before_open
    type: float
    initial_value: '0'

  - id: last_close_ts
    type: uint64_t
    initial_value: '0'

  - id: last_open_ts
    type: uint64_t
    initial_value: '0'

  - id: mute_until
    type: uint64_t
    initial_value: '0'

  - id: reminder_active_ts
    type: uint64_t
    initial_value: '0'
  - id: reminder_active_hhmm
    type: int[2]
    initial_value: '{0,0}'

  - id: stabilisation_pending
    type: bool
    initial_value: 'false'
  
  - id: empty_weight  # weight when no pills is in the box
    type: float
    restore_value: true
    initial_value: '0'
  
  - id: rmn_pills_inited
    type: int
    initial_value: '0'
  
  - id: previous_reminder_ts
    type: uint64_t
    restore_value: False
    initial_value: '0'
  
  - id: display_counter
    type: int
    restore_value: False
    initial_value: '0'
  
  # total pills taken
  - id: pills_taken
    type: int
    restore_value: false
    initial_value: '0'

  # manually stop the reminder
  - id: snooze_count
    type: uint32_t
    initial_value: '0'

  - id: snooze_ts
    type: uint64_t
    initial_value: '0'

  # buzzer constants
  - id: const_buzzer_box_open_timeout # start the buzzer again when the box was left open for a long time
    type: uint32_t
    initial_value: '120' # fixme
    restore_value: true

  - id: const_buzzer_snooze_time  # mute the buzzer for this duration when btn pressed
    type: uint32_t
    initial_value: '10' # fixme
    restore_value: true
  
  # local persistant copies of the HA entities
  - id: ha_cpy_per_pill_weight
    type: float
    initial_value: '0'
    restore_value: true
  - id: ha_cpy_buzzer_delay
    type: int
    initial_value: '0'
    restore_value: true
  - id: ha_cpy_max_reminder_time
    type: int
    initial_value: '0'
    restore_value: true
  - id: ha_cpy_rt_1
    type: int[5]  # ts, hh, mm, ss, hm
    initial_value: '{0,0,0,0,0}'
  - id: ha_cpy_rt_2
    type: int[5]
    initial_value: '{0,0,0,0,0}'
  - id: ha_cpy_rt_3
    type: int[5]
    initial_value: '{0,0,0,0,0}'
  
  


# I2C bus
i2c:
  sda: 2
  scl: 1
  scan: true


# GPIO outputs for buzzer and LED
output:
  - platform: ledc #gpio
    pin: 44
    id: buzzer_output
    frequency: 330Hz

  - platform: gpio
    pin: 6
    id: led_output

  - platform: gpio
    pin: 43
    id: wifi_indicator_output


interval:
  # led blinking
  - interval: 500ms
    then:
      - lambda: |-
          if(!id(reminder_active)) {
            id(led_state) = false;
            id(led_output).turn_off();
            return;
          }
          id(led_state) = !id(led_state);

          // blink if reminder is active
          // but keep it on without blinking if box is opened, or closed but weight not stabilised
          if(id(led_state) || id(box_open).state || id(stabilisation_pending)) {
            id(led_output).turn_on();
          } else {
            id(led_output).turn_off();
          }

  # buzzer buzzing
  - interval: 750ms
    then:
      - lambda: |-  
          bool buzzer_delay_passed = id(ha_time).now().timestamp > id(reminder_active_ts) + (uint64_t)(id(ha_cpy_buzzer_delay)) * id(timeout_scaler);
          if(id(reminder_active) && buzzer_delay_passed) {
            id(buzzer_state) = !id(buzzer_state);
            if(id(buzzer_state)) {
              bool is_box_opened = id(box_open).state;
              bool is_box_opened_for_a_long_time = id(ha_time).now().timestamp > id(last_open_ts) + id(const_buzzer_box_open_timeout);
              bool is_muted = id(ha_time).now().timestamp <= id(mute_until);
              bool is_weight_stabilised = !id(stabilisation_pending);
              if(!is_muted && (!is_box_opened || is_box_opened_for_a_long_time) && is_weight_stabilised) {
                id(buzzer_output).turn_on();
                id(buzzer_output).set_level(0.55f);
                id(buzzer_output).set_frequency(330);
              } else {
                id(buzzer_output).turn_off();
                id(buzzer_state) = false; // check again in the next round
              }
            } else {
              id(buzzer_output).turn_off();
            }
          } else {
            id(buzzer_output).turn_off();
          }

  # send notifications if the user forgot to take medicine after max_reminder_time
  - interval: 5000ms
    then: 
      - if:
          condition:
            lambda: 'return id(reminder_active) && id(ha_time).now().timestamp > id(reminder_active_ts) + (uint64_t)(id(ha_cpy_max_reminder_time))*id(timeout_scaler);'
          then:
            - lambda: |-
                id(reminder_active) = false;
                ESP_LOGE("medibox", "You forgot to take medicine!");
                if(id(calibration_state).state == "Not measuring") {
                  id(send_medicine_event).execute("missed");
                  id(fire_logbook_event).execute("missed", 0);
                }
            - homeassistant.service:
                service: persistent_notification.create
                data:
                  title: "Dose Missed"
                  message: !lambda |-
                    char msg[60];
                    snprintf(msg, sizeof(msg), "You forgot to take medicine for %02d:%02d!", id(reminder_active_hhmm)[0],id(reminder_active_hhmm)[1]);
                    return std::string(msg);
            - homeassistant.service:
                service: notify.mobile_app_your_phone
                data:
                  title: "Dose Missed"
                  message: "You forgot to take medicine!"

  # wifi indicator
  - interval: 1s
    then:
      - if:
          condition:
            lambda: 'return !id(wifi_connected);'
          then:
            - light.turn_on:
                id: led_wifi_indicator
                #flash_length: 500ms
          else:
            - light.turn_off: led_wifi_indicator

  # triggers the reminder at the scheduled time
  - interval: 1s
    then: 
      lambda: |-
        auto now = id(ha_time).now();
        int now_hm = now.hour * 60 + now.minute;

        // avoid triggering a second time in the same minute
        if(id(previous_reminder_ts) == now_hm) return;
        id(previous_reminder_ts) = now_hm;

        if(now_hm == id(ha_cpy_rt_1)[4] || now_hm == id(ha_cpy_rt_2)[4] || now_hm == id(ha_cpy_rt_3)[4]) {
          id(start_reminder).execute();
        }



image:
  - file: "dis.png"
    id: icon_ha_disconnected
    type: BINARY
    resize: 16x16

font:
  - file:
      type: gfonts
      family: Roboto
      weight: 100
    id: roboto_16
    size: 15
  - file:
      type: gfonts
      family: Roboto
      weight: 100
    id: roboto_8
    size: 8

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    lambda: |-
      // 1) Pills left (no decimals)
      it.printf(0, 0, id(roboto_16), "Pills Left: %.0f", id(remaining_pills).state);

      // 2) Box Status
      // it.printf(0, 16, id(roboto_16), "Magnet: %.0fuT", id(magnetic_strength).state);
      if(id(box_open).state) {
        it.print(0, 16, id(roboto_16), "Box Opened");
      } else {
        it.print(0, 16, id(roboto_16), "Box Closed");
      }
      id(display_counter)++;

      { // 5) HA Connectivity
        if(!id(HA_connected)) {
          it.image(128-16, 0, id(icon_ha_disconnected));
          if((id(display_counter)>>1)%3==0){ // display the text for 1u every 3u (1u=1 time unit, depends on the refresh time)
            it.print(0, 32, id(roboto_16), "Disconnected from");
            it.print(0, 48, id(roboto_16), "HomeAssistant");
            return;
          }
        }
      }

      { // 3) Find the most recent upcoming dose time
        auto now = id(ha_time).now();
        int now_ts = now.hour * 3600ull + now.minute * 60 + now.second;

        using Thms = int[5];
        Thms* slots[3] = {&id(ha_cpy_rt_1), &id(ha_cpy_rt_2), &id(ha_cpy_rt_3)};
        int best_ts = 100000000, bh = 0, bm = 0, bs = 0;
        for (int i = 0; i < 3; i++) {
          Thms &slot = *slots[i];
          int ts = slot[0];
          int diff = ts - now_ts;
          
          if(diff < 0) diff = 86400+diff;
          if (diff < best_ts) {
            best_ts = diff;
            bh = slot[1];
            bm = slot[2];
            bs = slot[3];
          }
        }
        // Next dose
        it.printf(0, 32, id(roboto_16), u8"Next Dose: %02d:%02d", bh, bm);

        // 4.2) remaining time
        std::string x; bool flag = false;
        if(best_ts >= 3600) x=x+std::to_string(best_ts/3600)+"h", best_ts%=3600 , flag=true;
        if(best_ts >= 60 || flag) x=x+std::to_string(best_ts/60)+"m", best_ts%=60 , flag=true;
        if(best_ts >= 0 || flag) x=x+std::to_string(best_ts)+"s" , flag=true;
        it.print(15, 48, id(roboto_16), x.c_str());
      }
      { // 4.1) Draw clock face at bottom-left:
        const int cx = 7, cy = 56, r = 5;
        it.circle( cx, cy, r );// outline circle
        it.line( cx, cy, cx, cy - r + 2 ); // minute hand (up)
        it.line( cx, cy, cx + r - 3, cy ); // hour hand (right)
      }
      
sensor:
  - platform: hx711
    name: "Medibox Raw Weight"
    id: raw_weight
    dout_pin: GPIO9
    clk_pin: GPIO8
    gain: 128
    update_interval: 0.1s   # fixme
    filters:
      - lambda: |-
          return (x + id(bias)) * id(lc_k);
    on_value:
      then:
        - lambda: |-
            static LoadCell<20> lc(0.3, 0.35);
            // feed our smoothing/detection:
            lc.addMeasurement(x);
            if (lc.isStabilized()) {
              float w = lc.getLastStabilizedWeight();
              id(stable_weight).publish_state(w);
              id(stable_detected).publish_state(true);
            } else {
              id(stable_detected).publish_state(false);
            }
            float wavg = lc.getWindowAverage();
            id(windowed_weight).publish_state(wavg);
    unit_of_measurement: "g"
    accuracy_decimals: 4
    

  - platform: template
    name: "Medibox Stable Weight"
    id: stable_weight
    unit_of_measurement: "g"
    accuracy_decimals: 4

  - platform: template
    name: "Medibox Current Weight (Window Avg)"
    id: windowed_weight
    unit_of_measurement: "g"
    accuracy_decimals: 4

  - platform: template
    name: "Remaining Pills"
    id: remaining_pills
    unit_of_measurement: ""
    accuracy_decimals: 0
  
  # Read variables from HomeAssistant and save a copy locally
  - platform: homeassistant
    id: max_reminder_time
    entity_id: input_number.max_reminder_time
    internal: true
    on_value: 
      then:
        lambda: |-
          id(ha_cpy_max_reminder_time) = id(max_reminder_time).state;

  - platform: homeassistant
    id: buzzer_delay
    entity_id: input_number.buzzer_delay
    internal: true
    on_value: 
      then:
        lambda: |-
          id(ha_cpy_buzzer_delay) = id(buzzer_delay).state;

  - platform: homeassistant
    id: weight_per_pill
    entity_id: input_number.weight_per_pill
    internal: true
    on_value: 
      then:
        lambda: |-
          id(ha_cpy_per_pill_weight) = (float)id(weight_per_pill).state;
  
  # expose the pills_taken global to Home Assistant
  - platform: template
    name: "Pills Taken"
    id: medibox_total_pills_taken
    lambda: |-
      return (int)id(pills_taken);
    update_interval: 2s
    accuracy_decimals: 0

  # MMC5603 magnetometer readings (uT)
  # - platform: mmc5603
  #   address: 0x30
  #   field_strength_x:
  #     name: "MMC5603 Field Strength X"
  #     unit_of_measurement: "uT"
  #     id: mag_x
  #   field_strength_y:
  #     name: "MMC5603 Field Strength Y"
  #     unit_of_measurement: "uT"
  #     id: mag_y
  #   field_strength_z:
  #     name: "MMC5603 Field Strength Z"
  #     unit_of_measurement: "uT"
  #     id: mag_z
  #   heading:
  #     name: "MMC5603 Heading"
  #   update_interval: 0.2s

  
  # - platform: template
  #   name: "Magnetic Strength"
  #   id: magnetic_strength
  #   unit_of_measurement: "uT"
  #   accuracy_decimals: 0
  #   update_interval: 0.2s
  #   lambda: |-
  #     float x = id(mag_x).state;
  #     float y = id(mag_y).state;
  #     float z = id(mag_z).state;
  #     return sqrt(x*x + y*y + z*z);

binary_sensor:
  - platform: template
    name: "Medibox Weight Stabilized"
    id: stable_detected
    on_press: 
      then:
        - script.execute: notify_weight_stabilized   # When weight stabilizes after a close, compute pills taken


  # Button, mutes buzzer or cancel reminder
  - platform: gpio
    pin:
      number: 4
      mode: INPUT_PULLUP
      inverted: true
    name: "Medibox Button"
    id: medibox_button
    on_press:
      then:
        - logger.log: "Button pressed -> muting buzzer"
        # calculate mute_until = now + 5 mins
        - lambda: |-
            if(!id(reminder_active)) return;

            // mute the buzzer for a few minutes
            uint64_t now = id(ha_time).now().timestamp;
            id(mute_until) = now + id(const_buzzer_snooze_time);

            // snooze 5 times within 5 secs to cancel reminder
            if(now - id(snooze_ts) > 5) id(snooze_ts)=now, id(snooze_count)=0;
            id(snooze_count) = id(snooze_count) + 1;
            ESP_LOGI("medibox","Snooze Clicked, cnt=%d", id(snooze_count));
            if(id(snooze_count) >= 5) {
              id(reminder_active) = false;
              id(snooze_ts) = id(snooze_count)=0;
              id(notify_manual_cancel).execute();
              id(fire_logbook_event).execute("cancel", 0);
            }
            
  
  - platform: template
    name: "Medibox Open"
    id: box_open
    lambda: |-
      return !id(hall_effect_sensor).state;
      //return id(magnetic_strength).state < 1000.0;

    # Mute any buzzing as soon as box is opened
    on_press:
      then:
        - logger.log: "Box opened"
        - lambda: |-
            id(pills_taken) = 0;
            id(last_open_ts) = id(ha_time).now().timestamp;
            id(weight_before_open) = id(stable_weight).state;

    # On box close -> record weight_before_open and mute buzzer until stabilized
    on_release:
      then:
        - logger.log: "Box closed"
        - if:
            condition:
              lambda: 'return id(stable_detected).state;'
            then:
              - lambda: 'id(stabilisation_pending) = true;'
              - script.execute: notify_weight_stabilized
            else:
              - lambda: |-
                  ESP_LOGI("medibox","Box closed, waiting for weight to stabilise");
                  id(stabilisation_pending) = true;
                  id(last_close_ts) = id(ha_time).now().timestamp;
                  ESP_LOGI("medibox","Closed: weight_before_open=%.2f", id(weight_before_open));
  - platform: gpio
    name: "Hall Effect Sensor"
    id: hall_effect_sensor
    pin:
      number: GPIO5
      mode: INPUT_PULLUP
      inverted: true      # A3213 pulls low when magnet is near
    filters:
      - delayed_on: 10ms   # Debounce
      - delayed_off: 10ms



# LEDs and buzzer
# buzzer is modelled as a LED here because they can be controlled the same way
light:
  - platform: binary
    id: medibox_led
    name: "Medibox LED"
    output: led_output
    restore_mode: ALWAYS_OFF

  - platform: binary
    id: medibox_buzzer
    name: "Medibox Buzzer"
    output: buzzer_output
    restore_mode: ALWAYS_OFF

  - platform: binary
    id: led_wifi_indicator
    name: "Wifi Indicator"
    output: wifi_indicator_output
    restore_mode: ALWAYS_OFF


time:
  - platform: homeassistant
    id: ha_time

# Receive scheduled time from HA and save a copy locally
text_sensor:
  - platform: homeassistant
    id: calibration_state
    entity_id: input_select.pill_scale_state
    internal: true

  - platform: homeassistant
    id: medibox_morning_time
    entity_id: input_datetime.medibox_morning_time
    on_value: 
      then:
        lambda: |-
          int hh,mm,ss,tt,hm;
          sscanf(id(medibox_morning_time).state.c_str(), "%d:%d:%d", &hh,&mm,&ss);
          tt = 3600 * hh + 60 * mm + ss; hm = 60*hh + mm;
          ESP_LOGI("medibox","Morning Time changed to %d:%d:%d %d", hh,mm,ss,tt);
          id(ha_cpy_rt_1)[0] = tt, id(ha_cpy_rt_1)[1] = hh, id(ha_cpy_rt_1)[2] = mm, id(ha_cpy_rt_1)[3] = ss, id(ha_cpy_rt_1)[4] = hm;
          id(HA_synced) = true;
          
  - platform: homeassistant
    id: medibox_noon_time
    entity_id: input_datetime.medibox_noon_time
    on_value: 
      then:
        lambda: |-
          int hh,mm,ss,tt,hm;
          sscanf(id(medibox_noon_time).state.c_str(), "%d:%d:%d", &hh,&mm,&ss);
          tt = 3600 * hh + 60 * mm + ss; hm = 60*hh + mm;
          ESP_LOGI("medibox","Noon Time changed to %d:%d:%d %d", hh,mm,ss,tt);
          id(ha_cpy_rt_2)[0] = tt, id(ha_cpy_rt_2)[1] = hh, id(ha_cpy_rt_2)[2] = mm, id(ha_cpy_rt_2)[3] = ss, id(ha_cpy_rt_2)[4] = hm;
          id(HA_synced) = true;

  - platform: homeassistant
    id: medibox_night_time
    entity_id: input_datetime.medibox_night_time
    on_value: 
      then:
        lambda: |-
          int hh,mm,ss,tt,hm;
          sscanf(id(medibox_night_time).state.c_str(), "%d:%d:%d", &hh,&mm,&ss);
          tt = 3600 * hh + 60 * mm + ss; hm = 60*hh + mm;
          ESP_LOGI("medibox","Night Time changed to %d:%d:%d %d", hh,mm,ss,tt);
          id(ha_cpy_rt_3)[0] = tt, id(ha_cpy_rt_3)[1] = hh, id(ha_cpy_rt_3)[2] = mm, id(ha_cpy_rt_3)[3] = ss, id(ha_cpy_rt_3)[4] = hm;
          id(HA_synced) = true;


script:
  # Script to start the medicine reminder (called from Home Assistant)
  - id: start_reminder
    then:
      - lambda: |-
          if(!id(HA_synced)) return; // don't start reminder without knowing when
          if(id(reminder_active)) return;
          // set flag
          auto now = id(ha_time).now();
          id(reminder_active_ts) = now.timestamp;
          id(reminder_active) = true;
          id(reminder_active_hhmm)[0] = now.hour, id(reminder_active_hhmm)[1] = now.minute;
          // reset variables
          id(led_state) = id(buzzer_state) = false;
          id(mute_until) = 0;
          ESP_LOGI("reminder","Reminder START");
      - light.turn_on:
          id: medibox_led
  
  - id: stop_reminder
    then:
      - lambda: |-
          id(reminder_active) = false;
          ESP_LOGI("reminder","Reminder STOP");
  
  - id: reset_total_pills_taken
    then:
      - lambda: |-
          id(pills_taken) = 0;
  
  - id: set_empty_weight
    then:
      - lambda: |-
          id(empty_weight) = id(stable_weight).state;
  
  - id: notify_manual_cancel
    then:
      - homeassistant.service:
          service: persistent_notification.create
          data:
            title: "Reminder"
            message: !lambda |-
              char msg[60];
              auto now = id(ha_time).now();
              snprintf(msg, sizeof(msg), "You manually stopped the reminder at %02d:%02d.", now.hour, now.minute);
              return std::string(msg);
  
  - id: send_medicine_event
    parameters:
      status: string
    then:
      - homeassistant.event:
          event: esphome.medicine_event
          data:
            status: !lambda 'return status;'

  - id: fire_logbook_event
    parameters:
      action: string        # "on_time" | "missed" | "off_sched" | "refill" | "cancel"
      qty: int              # number of pills (0 for "missed")
    then:
      - homeassistant.service:
          service: logbook.log
          data:
            name: Medibox
            message: !lambda |-
              char buf[64]={0};
              if (action == "on_time") {
                snprintf(buf, sizeof(buf), "Took %d pill%s on time.", qty, (qty != 1) ? "s" : "");
                return std::string(buf);
              }
              if (action == "missed") return std::string("Dose missed.");
              if (action == "off_sched") {
                snprintf(buf, sizeof(buf), "Took %d pill%s out of schedule.", qty, (qty != 1) ? "s" : "");
                return std::string(buf);
              }
              if (action == "refill") {
                snprintf(buf, sizeof(buf),  "Refilled %d pill%s.", qty, (qty != 1) ? "s" : "");
                return std::string(buf);
              }
              if (action == "cancel") return std::string("Reminder cancelled manually.");
              return std::string("Unknown event.");
            entity_id: !lambda |-
              if(action == "on_time") return "input_boolean.medibox_logbook_dummy_on_time";
              if(action == "missed") return "input_boolean.medibox_logbook_dummy_missed";
              if(action == "off_sched") return "input_boolean.medibox_logbook_dummy_off_sched";
              if(action == "refill") return "input_boolean.medibox_logbook_dummy_refill";
              if(action == "cancel") return "input_boolean.medibox_logbook_dummy_cancel";
              return "";
      # - homeassistant.event:
      #     event: esphome.medibox_logbook_event
      #     data:
      #       action: !lambda 'return action;'
      #       qty:    !lambda 'return qty;'

  # what to do when the load cell stabilises
  - id: notify_weight_stabilized
    then:
      - lambda: |-
          if(!id(stable_detected)) return;

          // if the box is open, the weight cannot tell us anything useful, so do nothing.
          if(id(box_open).state) {
            ESP_LOGI("medibox",">>> Load cell stabilized but medbox is opened.");
            id(stabilisation_pending) = false;
            return;
          }

          // calculate the number of pills taken during the box is open.
          ESP_LOGI("medibox",">>> Load cell stabilized.");
          uint64_t now_ts = id(ha_time).now().timestamp;
          float diff = id(weight_before_open) - id(stable_weight).state;
          ESP_LOGI("medibox","weight changed:    %f/%f=%f",diff,id(ha_cpy_per_pill_weight), diff / id(ha_cpy_per_pill_weight));

          // if the medibox is just powered up, then initialise the remaining pills count.
          if(id(rmn_pills_inited) == 0) {
            id(rmn_pills_inited) = 1;
            int rmn_pills = (int)round((id(stable_weight).state-id(empty_weight)) / id(ha_cpy_per_pill_weight));
            id(remaining_pills).publish_state(rmn_pills);
          }

          if(diff != diff) { // diff is NaN
            ESP_LOGI("medibox","system was booted with box opened and `stable_weight` is not yet set.");
            return;
          }

          // somebody is waiting for stabilisation (i forgot why i added this but i am too tired to refactor)
          if(id(stabilisation_pending)) {
            int pills = (int)round(diff / id(ha_cpy_per_pill_weight));
            ESP_LOGI("medibox","Taken %d pills", pills);
            if(pills > 0) {
              id(pills_taken) = pills;
            }

            // update the number of remaining pills
            int rmn_pills = (int)round((id(stable_weight).state-id(empty_weight)) / id(ha_cpy_per_pill_weight));
            id(remaining_pills).publish_state(rmn_pills);

            // if remider is active, calculate the number of pills taken.
            // stop the reminders if pills are taken.
            if(pills < 0) {
              if(id(calibration_state).state == "Not measuring") {
                id(fire_logbook_event).execute("refill", -pills);
              }
              ESP_LOGI("medibox","Refilled %d pills", -pills);
            }
            if (id(reminder_active)) {
              if (pills >= 1 && pills < 10000) { // if pills are taken (TODO: do we also stop the reminder if pills are refilled?)
                id(pill_count) -= pills;
                id(reminder_active) = false;
                // stop LED & buzzer
                id(medibox_led).turn_off();
                id(medibox_buzzer).turn_off();
                id(send_medicine_event).execute("on_time");
                id(fire_logbook_event).execute("on_time", pills);
                ESP_LOGI("medibox","Pills taken on time");
              } else {
                // still missed -> keep buzzing
                ESP_LOGI("medibox","still missed, keep buzzing.  pills=%d", pills);
                id(medibox_buzzer).turn_on();
              }
            } else {
              if (pills >= 1 && pills < 10000) {
                if(id(calibration_state).state == "Not measuring") {
                  id(send_medicine_event).execute("outside_window");
                  id(fire_logbook_event).execute("off_sched", pills);
                }
                ESP_LOGI("medibox","Pills taken outside of schedule");
              }
            }
          }
          id(stabilisation_pending) = false;

